{"version":3,"sources":["components/FeedBack/Section/Section.js","components/FeedBack/FeedbackOptions/FeedbackOptions.js","components/FeedBack/Statistics/Statistics.js","components/FeedBack/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","props","options","onLeaveFeedback","map","option","index","type","class","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","result","Math","round","evt","nameOption","target","setState","prevState","this","Object","keys","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAaeA,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,qCACE,4BAAID,IACHC,MCuBUC,G,MAxBS,SAAAC,GACtB,IAAQC,EAA6BD,EAA7BC,QAASC,EAAoBF,EAApBE,gBACjB,OACE,8BACGD,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,wBAEEC,KAAK,SACLC,MAAM,SACNC,KAAMJ,EACNK,QAASP,EALX,SAOGE,GANIC,EAAQD,UCeRM,EAtBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,8CACSJ,EACP,uBAFF,YAGYC,EACV,uBAJF,QAKQC,EACN,uBANF,UAOUC,EACR,uBARF,sBASsBC,EATtB,SCQaC,EAVM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,mCACE,4BAAIA,OCGaC,E,4MACnBC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,mBAAqB,WACnB,MAA+B,EAAKD,MACpC,OADA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBQ,gCAAkC,WAChC,IAAMP,EAAQ,EAAKM,qBACfE,EAAS,EAMb,OAJIR,EAAQ,IACVQ,EAASC,KAAKC,MAAO,EAAKL,MAAMR,KAAOG,EAAS,MAG3CQ,G,EAGTpB,gBAAkB,SAAAuB,GAChB,IAAMC,EAAaD,EAAIE,OAAOnB,KAC9B,EAAKoB,UAAS,SAAAC,GAAS,sBACpBH,EAAaG,EAAUH,GAAc,O,4CAI1C,WACE,MAA+BI,KAAKX,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBZ,EAAU8B,OAAOC,KAAKF,KAAKX,OAEjC,OACE,qCACE,cAAC,EAAD,CAAStB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEI,QAASA,EACTC,gBAAiB4B,KAAK5B,oBAGzB4B,KAAKV,qBAAuB,EAC3B,cAAC,EAAD,CAASvB,MAAM,aAAf,SACE,cAAC,EAAD,CACEc,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,KAAKV,qBACZL,mBAAoBe,KAAKT,sCAI7B,cAAC,EAAD,CAAcJ,QAAQ,gC,GArDCgB,IAAMC,WCHvCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7e9c3604.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <>\r\n    <p>{title}</p>\r\n    {children}\r\n  </>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './FeedbackOptions.css';\r\n\r\nconst FeedbackOptions = props => {\r\n  const { options, onLeaveFeedback } = props;\r\n  return (\r\n    <div>\r\n      {options.map((option, index) => (\r\n        <button\r\n          key={index + option}\r\n          type=\"button\"\r\n          class=\"button\"\r\n          name={option}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.array.isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    Good: {good}\r\n    <br />\r\n    Neutral: {neutral}\r\n    <br />\r\n    Bad: {bad}\r\n    <br />\r\n    Total: {total}\r\n    <br />\r\n    Positive feedback: {positivePercentage} %\r\n  </>\r\n);\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n  <>\r\n    <p>{message}</p>\r\n  </>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\nimport './App.css';\nimport Section from './components/FeedBack/Section/Section';\nimport FeedbackOptions from './components/FeedBack/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/FeedBack/Statistics/Statistics';\nimport Notification from './components/FeedBack/Notification/Notification';\n\nexport default class App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    let result = 0;\n\n    if (total > 0) {\n      result = Math.round((this.state.good / total) * 100);\n    }\n\n    return result;\n  };\n\n  onLeaveFeedback = evt => {\n    const nameOption = evt.target.name;\n    this.setState(prevState => ({\n      [nameOption]: prevState[nameOption] + 1,\n    }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        {this.countTotalFeedback() > 0 ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"There is no feedback\" />\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}